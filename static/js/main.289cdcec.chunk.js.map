{"version":3,"sources":["App.js","serviceWorker.js","index.js","../node_modules/pdfjs-dist/build sync"],"names":["App","state","file","numPages","pageNumber","onFileChange","event","_this","setState","target","files","onDocumentLoadSuccess","_ref","nextPage","nextPageNumber","currentPageNumber","previousPage","previousPageNumber","openSelectedPage","parentNode","dataset","console","log","_this2","this","_this$state","react_default","a","createElement","Container","Header","textAlign","Form","type","onChange","entry","onLoadSuccess","noData","renderMode","className","Button","onClick","scale","Array","from","el","index","key","concat","React","Component","Boolean","window","location","hostname","match","pdfjs","GlobalWorkerOptions","workerSrc","version","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","webpackEmptyContext","req","e","Error","code","keys","resolve","module","exports","id"],"mappings":"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","file":"static/js/main.289cdcec.chunk.js","sourcesContent":["import React from 'react';\nimport { Container, Header, Form, Button } from 'semantic-ui-react';\nimport { Document, Page } from 'react-pdf';\n\nexport default class App extends React.Component {\n  state = {\n    file: null,\n    numPages: 0,\n    pageNumber: 1,\n  };\n\n  onFileChange = event => {\n    this.setState({\n      file: event.target.files[0],\n    });\n  };\n\n  onDocumentLoadSuccess = ({ numPages }) => {\n    this.setState({ numPages });\n  };\n\n  nextPage = () => {\n    const currentPageNumber = this.state.pageNumber;\n    let nextPageNumber;\n\n    if (currentPageNumber + 1 > this.state.numPages) {\n      nextPageNumber = 1;\n    } else {\n      nextPageNumber = currentPageNumber + 1;\n    }\n\n    this.setState({\n      pageNumber: nextPageNumber,\n    });\n  };\n\n  previousPage = () => {\n    const currentPageNumber = this.state.pageNumber;\n    let previousPageNumber;\n\n    if (currentPageNumber - 1 > this.state.numPages) {\n      previousPageNumber = 1;\n    } else {\n      previousPageNumber = currentPageNumber - 1;\n    }\n\n    this.setState({\n      pageNumber: previousPageNumber,\n    });\n  };\n\n  openSelectedPage = event => {\n    const currentPageNumber = event.target.parentNode.parentNode.dataset.pageNumber;\n    console.log(event.target.parentNode.parentNode);\n    console.log(currentPageNumber);\n\n    this.setState({\n      pageNumber: +currentPageNumber,\n    });\n  };\n\n  render() {\n    const { pageNumber, numPages } = this.state;\n\n    return (\n      <Container>\n        <br />\n        <Header textAlign=\"center\">PDF Preview</Header>\n        <Form>\n          <input type=\"file\" onChange={this.onFileChange} />\n        </Form>\n        <main>\n          <div>\n            <Document\n              file={this.state.file}\n              onLoadSuccess={this.onDocumentLoadSuccess}\n              noData={<h4>Please select a file</h4>}\n              renderMode=\"svg\"\n            >\n              <Page pageNumber={pageNumber} />\n            </Document>\n            {this.state.file ? (\n              <div className=\"navigation\">\n                <div>\n                  <Button onClick={this.previousPage}>Previous</Button>\n                  <p>\n                    Page {pageNumber} of {numPages}\n                  </p>\n                  <Button onClick={this.nextPage}>Next</Button>\n                </div>\n              </div>\n            ) : null}\n          </div>\n\n          <div>\n            <Document\n              file={this.state.file}\n              onLoadSuccess={this.onDocumentLoadSuccess}\n              noData={<h4>Please select a file</h4>}\n              renderMode=\"canvas\"\n              scale=\"0.3\"\n              className=\"miniaturesContainer\"\n            >\n              {Array.from(\n                new Array(numPages),\n\n                (el, index) => (\n                  <div>\n                    <Page\n                      className=\"miniatures\"\n                      key={`page_${index + 1}`}\n                      pageNumber={index + 1}\n                      scale=\"0.3\"\n                      onClick={this.openSelectedPage}\n                    />\n                    <span className=\"previewNumber\">{index + 1}</span>\n                  </div>\n                )\n              )}\n            </Document>\n          </div>\n        </main>\n      </Container>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { pdfjs } from 'react-pdf';\npdfjs.GlobalWorkerOptions.workerSrc = `//cdnjs.cloudflare.com/ajax/libs/pdf.js/${pdfjs.version}/pdf.worker.js`;\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","function webpackEmptyContext(req) {\n\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\te.code = 'MODULE_NOT_FOUND';\n\tthrow e;\n}\nwebpackEmptyContext.keys = function() { return []; };\nwebpackEmptyContext.resolve = webpackEmptyContext;\nmodule.exports = webpackEmptyContext;\nwebpackEmptyContext.id = 58;"],"sourceRoot":""}